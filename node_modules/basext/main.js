var toBase64Sync = function(text) {
  var textBuffer = new Buffer(text, "utf8")
  return textBuffer.toString("base64");
}
var toTextSync = function(base64) {
  var base64Buffer = new Buffer(base64, "base64");
  return base64Buffer.toString("utf8");
}
var toBase64 = function(text, callback) {
  try {
    var textBuffer = new Buffer(text, "utf8");
    callback(null, textBuffer.toString("base64"));
  } catch (err) {
    callback(err, null);
  }
}
var toText = function(base64, callback) {
  try {
    var base64Buffer = new Buffer(base64, "base64");
    callback(null, base64Buffer.toString("utf8"));
  } catch (err) {
    callback(err, null);
  }
}
var toBase64WithPromise = function(text) {
  return new Promise(function(resolve, reject) {
    try {
      var textBuffer = new Buffer(text, "utf8");
      resolve(textBuffer.toString("base64"));
    } catch (err) {
      reject(err);
    }
  });
}
var toTextWithPromise = function(base64) {
  return new Promise(function(resolve, reject) {
    try {
      var base64Buffer = new Buffer(base64, "base64");
      resolve(base64Buffer.toString("utf8"));
    } catch (err) {
      reject(err);
    }
  });
}
var allInOne = function(options) {
  var to = options.to;
  if (options.callback) {
    if (to == "text") {
      toText(options.data, options.callback);
    } else if (to == "base64") {
      toBase64(options.data, options.callback);
    }
  } else if (options.promise === true) {
    if (to == "text") {
      return toTextWithPromise(options.data);
    } else if (to == "base64") {
      return toBase64WithPromise(options.data);
    }
  } else {
    if (to == "text") {
      return toTextSync(options.data);
    } else if (to == "base64") {
      return toBase64Sync(options.data);
    }
  }
}

module.exports = allInOne;
module.exports.toBase64Sync = toBase64Sync;
module.exports.toTextSync = toTextSync;
module.exports.toBase64 = toBase64;
module.exports.toText = toText;
module.exports.toBase64WithPromise = toBase64WithPromise;
module.exports.toTextWithPromise = toTextWithPromise;
